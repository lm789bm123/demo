/*
Deployment script for DemoDatabase

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DemoDatabase"
:setvar DefaultFilePrefix "DemoDatabase"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [dbo].[udt_bet_financial]...';


GO
CREATE TYPE [dbo].[udt_bet_financial] AS TABLE (
    [ticket_id]      BIGINT           NOT NULL PRIMARY KEY CLUSTERED ([ticket_id] ASC),
    [pool_id]        BIGINT           NOT NULL,
    [combination_id] BIGINT           NOT NULL,
    [sell_datetime]  DATETIME2 (7)    NOT NULL,
    [unit_bet]       DECIMAL (28, 12) NOT NULL,
    [profit_loss]    DECIMAL (28, 12) NOT NULL,
    [account_no]     VARCHAR (16)     NULL);


GO
PRINT N'Creating [dbo].[udt_match_info]...';


GO
CREATE TYPE [dbo].[udt_match_info] AS TABLE (
    [event_id]    BIGINT        NOT NULL,
    [frontend_id] NVARCHAR (10) NOT NULL);


GO
PRINT N'Creating [dbo].[udt_operation]...';


GO
CREATE TYPE [dbo].[udt_operation] AS TABLE (
    [message_type]   VARCHAR (32) NOT NULL,
    [operation_type] TINYINT      NOT NULL);


GO
PRINT N'Creating [dbo].[udt_pools]...';


GO
CREATE TYPE [dbo].[udt_pools] AS TABLE (
    [pool_id]  BIGINT  NOT NULL,
    [event_id] BIGINT  NOT NULL,
    [bet_type] TINYINT NOT NULL);


GO
PRINT N'Creating [dbo].[bet_financial]...';


GO
CREATE TABLE [dbo].[bet_financial] (
    [ticket_id]      BIGINT           NOT NULL,
    [pool_id]        BIGINT           NOT NULL,
    [combination_id] BIGINT           NOT NULL,
    [sell_datetime]  DATETIME2 (7)    NOT NULL,
    [unit_bet]       DECIMAL (28, 12) NOT NULL,
    [profit_loss]    DECIMAL (28, 12) NOT NULL,
    [account_no]     VARCHAR (16)     NULL,
    [create_at]      DATETIME2 (7)    NULL,
    [update_at]      DATETIME2 (7)    NULL,
    [checkpoint_id]  BIGINT           NOT NULL,
    PRIMARY KEY CLUSTERED ([ticket_id] ASC)
);


GO
PRINT N'Creating [dbo].[log_event]...';


GO
CREATE TABLE [dbo].[log_event] (
    [checkpoint_id]  BIGINT        NOT NULL,
    [message_type]   NVARCHAR (32) NULL,
    [operation_type] TINYINT       NOT NULL,
    [create_at]      DATETIME2 (7) NULL,
    [update_at]      DATETIME2 (7) NULL,
    CONSTRAINT [PK_tbl_checkpoint_id] PRIMARY KEY CLUSTERED ([checkpoint_id] ASC)
);


GO
PRINT N'Creating [dbo].[match_info]...';


GO
CREATE TABLE [dbo].[match_info] (
    [event_id]      BIGINT        NOT NULL,
    [frontend_id]   NVARCHAR (10) NOT NULL,
    [create_at]     DATETIME2 (7) NULL,
    [update_at]     DATETIME2 (7) NULL,
    [checkpoint_id] BIGINT        NOT NULL,
    CONSTRAINT [PK_tbl_match_info] PRIMARY KEY CLUSTERED ([event_id] ASC)
);


GO
PRINT N'Creating [dbo].[pools]...';


GO
CREATE TABLE [dbo].[pools] (
    [pool_id]       BIGINT        NOT NULL,
    [event_id]      BIGINT        NOT NULL,
    [bet_type]      TINYINT       NOT NULL,
    [create_at]     DATETIME2 (7) NULL,
    [update_at]     DATETIME2 (7) NULL,
    [checkpoint_id] BIGINT        NOT NULL,
    CONSTRAINT [PK_tbl_pools] PRIMARY KEY CLUSTERED ([pool_id] ASC)
);


GO
PRINT N'Altering [dbo].[checkpoint_id]...';


GO
ALTER SEQUENCE [dbo].[checkpoint_id]
    CACHE 10
    RESTART WITH 1;


GO
PRINT N'Creating [dbo].[usp_bet_financial]...';


GO
CREATE PROCEDURE [dbo].[usp_bet_financial]
	@data dbo.udt_bet_financial READONLY,
	@checkpoint_id BIGINT, 
	@operation_type TINYINT
AS
	BEGIN 
		BEGIN TRANSACTION
			
			BEGIN TRY
				
				DECLARE @ticket_id BIGINT 
				
				SELECT @ticket_id = ticket_id
				FROM @data

				IF @operation_type = 1
				BEGIN
					INSERT INTO dbo.bet_financial
					(
						[ticket_id]		
						,[pool_id]		
						,[combination_id]
						,[sell_datetime]	
						,[unit_bet]		
						,[profit_loss]	
						,[account_no]	
						,[create_at]
						,[update_at]
						,[checkpoint_id]  					 					 
					 )
					SELECT 
					[ticket_id]		
					,[pool_id]		
					,[combination_id]
					,[sell_datetime]
					,[unit_bet]		
					,[profit_loss]	
					,[account_no]	
					,sysdatetime()    
					,sysdatetime()  
					,@checkpoint_id
					FROM @data
				END 

				ELSE IF @operation_type = 2
				BEGIN
				
					UPDATE bet_financial 
					SET 
					 bet_financial.[pool_id]		  = d.[pool_id]		
					,bet_financial.[combination_id] = d.[combination_id]
					,bet_financial.[sell_datetime]  = d.[sell_datetime]
					,bet_financial.[unit_bet]		  = d.[unit_bet]		
					,bet_financial.[profit_loss]	  = d.[profit_loss]	
					,bet_financial.[account_no]	  = d.[account_no]	
					,bet_financial.update_at    = sysdatetime()
					,bet_financial. checkpoint_id = @checkpoint_id
					FROM @data d
					WHERE d.ticket_id = bet_financial.ticket_id

				END
				ELSE

				BEGIN

				DELETE FROM bet_financial
				WHERE ticket_id = @ticket_id

				END 


			END TRY

			BEGIN CATCH
				SELECT ERROR_NUMBER()
			END CATCH
		COMMIT TRANSACTION 
	END
GO
PRINT N'Creating [dbo].[usp_log_event]...';


GO
CREATE PROCEDURE [dbo].[usp_log_event]
	@meta dbo.udt_operation READONLY,
	@checkpoint_id BIGINT OUTPUT,
	@operation_type TINYINT OUTPUT
AS
	BEGIN 
		BEGIN TRANSACTION
			
			BEGIN TRY
				
				SELECT @checkpoint_id = NEXT VALUE FOR checkpoint_id

				SELECT @operation_type = @operation_type
				FROM @meta

				INSERT INTO dbo.log_event
				([checkpoint_id], [message_type], [operation_type], [create_at]	,[update_at])
				
				SELECT @checkpoint_id, message_type, operation_type, SYSDATETIME(), SYSDATETIME()
				FROM @meta

			END TRY

			BEGIN CATCH
				SELECT ERROR_NUMBER()
			END CATCH
		COMMIT TRANSACTION 
	END
GO
PRINT N'Creating [dbo].[usp_match_create]...';


GO
CREATE PROCEDURE [dbo].[usp_match_create]
	@data dbo.udt_match_info READONLY,
	@checkpoint_id BIGINT, 
	@operation_type TINYINT
AS
	BEGIN 
		BEGIN TRANSACTION
			
			BEGIN TRY
				
				DECLARE @event_id BIGINT 
				
				SELECT @event_id = event_id
				FROM @data

				IF @operation_type = 1
				BEGIN
					INSERT INTO dbo.match_info
					(
					[event_id]	    
					,[frontend_id]   
					,[create_at]     
					,[update_at]     
					,[checkpoint_id] )
					SELECT 
					[event_id]	    
					,[frontend_id]  
					,sysdatetime()    
					,sysdatetime()  
					,@checkpoint_id
					FROM @data
				END 

				ELSE IF @operation_type = 2
				BEGIN
				
					UPDATE [match_info]
					SET 
					[match_info].frontend_id = d.frontend_id,    
					[match_info].update_at    = sysdatetime(),
					[match_info]. checkpoint_id = @checkpoint_id
					FROM @data d
					WHERE d.event_id = [match_info].event_id

				END
				ELSE

				BEGIN

				DELETE FROM [match_info]
				WHERE event_id = @event_id

				END 


			END TRY

			BEGIN CATCH
				SELECT ERROR_NUMBER()
			END CATCH
		COMMIT TRANSACTION 
	END
GO
PRINT N'Creating [dbo].[usp_pools]...';


GO
CREATE PROCEDURE [dbo].[usp_pools]
	@data dbo.udt_pools READONLY,
	@checkpoint_id BIGINT, 
	@operation_type TINYINT
AS
	BEGIN 
		BEGIN TRANSACTION
			
			BEGIN TRY
				
				DECLARE @pool_id BIGINT 
				
				SELECT @pool_id= pool_id
				FROM @data

				IF @operation_type = 1
				BEGIN
					INSERT INTO dbo.pools
					(
					[pool_id]		
					,[event_id]		
					,[bet_type]		
					,[create_at]		
					,[update_at]		
					,[checkpoint_id] 					 					 
					 )
					SELECT 
					[pool_id]
					,[event_id]	    
					,[bet_type]  
					,sysdatetime()    
					,sysdatetime()  
					,@checkpoint_id
					FROM @data
				END 

				ELSE IF @operation_type = 2
				BEGIN
				
					UPDATE pools
					SET 
					pools.bet_type = d.bet_type,    
					pools.update_at    = sysdatetime(),
					pools. checkpoint_id = @checkpoint_id
					FROM @data d
					WHERE d.event_id = pools.event_id

				END
				ELSE

				BEGIN

				DELETE FROM pools
				WHERE pool_id = @pool_id

				END 


			END TRY

			BEGIN CATCH
				SELECT ERROR_NUMBER()
			END CATCH
		COMMIT TRANSACTION 
	END
GO
PRINT N'Update complete.';


GO
